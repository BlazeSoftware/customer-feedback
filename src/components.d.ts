/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CustomerFeedback {
        "close": () => Promise<void>;
        "header": string;
        "instruction": string;
        "screenshot": boolean;
        "show": () => Promise<void>;
    }
    interface FeedbackForm {
        "header": string;
        "instruction": string;
        "screenshot": boolean;
    }
    interface ScreenCapture {
    }
}
export interface FeedbackFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFeedbackFormElement;
}
declare global {
    interface HTMLCustomerFeedbackElement extends Components.CustomerFeedback, HTMLStencilElement {
    }
    var HTMLCustomerFeedbackElement: {
        prototype: HTMLCustomerFeedbackElement;
        new (): HTMLCustomerFeedbackElement;
    };
    interface HTMLFeedbackFormElementEventMap {
        "feedback": any;
        "screenCapture": any;
    }
    interface HTMLFeedbackFormElement extends Components.FeedbackForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFeedbackFormElementEventMap>(type: K, listener: (this: HTMLFeedbackFormElement, ev: FeedbackFormCustomEvent<HTMLFeedbackFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFeedbackFormElementEventMap>(type: K, listener: (this: HTMLFeedbackFormElement, ev: FeedbackFormCustomEvent<HTMLFeedbackFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFeedbackFormElement: {
        prototype: HTMLFeedbackFormElement;
        new (): HTMLFeedbackFormElement;
    };
    interface HTMLScreenCaptureElement extends Components.ScreenCapture, HTMLStencilElement {
    }
    var HTMLScreenCaptureElement: {
        prototype: HTMLScreenCaptureElement;
        new (): HTMLScreenCaptureElement;
    };
    interface HTMLElementTagNameMap {
        "customer-feedback": HTMLCustomerFeedbackElement;
        "feedback-form": HTMLFeedbackFormElement;
        "screen-capture": HTMLScreenCaptureElement;
    }
}
declare namespace LocalJSX {
    interface CustomerFeedback {
        "header"?: string;
        "instruction"?: string;
        "screenshot"?: boolean;
    }
    interface FeedbackForm {
        "header"?: string;
        "instruction"?: string;
        "onFeedback"?: (event: FeedbackFormCustomEvent<any>) => void;
        "onScreenCapture"?: (event: FeedbackFormCustomEvent<any>) => void;
        "screenshot"?: boolean;
    }
    interface ScreenCapture {
    }
    interface IntrinsicElements {
        "customer-feedback": CustomerFeedback;
        "feedback-form": FeedbackForm;
        "screen-capture": ScreenCapture;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "customer-feedback": LocalJSX.CustomerFeedback & JSXBase.HTMLAttributes<HTMLCustomerFeedbackElement>;
            "feedback-form": LocalJSX.FeedbackForm & JSXBase.HTMLAttributes<HTMLFeedbackFormElement>;
            "screen-capture": LocalJSX.ScreenCapture & JSXBase.HTMLAttributes<HTMLScreenCaptureElement>;
        }
    }
}
